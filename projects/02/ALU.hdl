// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    //// Replace this comment with your code.
    Not16(in=x, out=notx);
    Add16(a=x, b=notx, out=temp1);
    Not16(in=temp1, out=zerox);
    Mux16(a=x, b=zerox, sel=zx, out=outzx);

    Not16(in=outzx, out=negateoutzx);
    Mux16(a=outzx, b=negateoutzx, sel=nx, out=outnx);

    Not16(in=y, out=noty);
    Add16(a=y, b=noty, out=temp2);
    Not16(in=temp2, out=zeroy);
    Mux16(a=y, b=zeroy, sel=zy, out=outzy);

    Not16(in=outzy, out=negateoutzy);
    Mux16(a=outzy, b=negateoutzy, sel=ny, out=outny);

    Add16(a=outnx, b=outny, out=sumxy);
    And16(a=outnx, b=outny, out=andxy);
    Mux16(a=andxy, b=sumxy, sel=f, out=outf);

    Not16(in=outf, out=negateoutf);
    Mux16(a=outf, b=negateoutf, sel=no, out=out, out[15]=ng, out[0..7]=out1, out[8..15]=out2);

    Or8Way(in=out1, out=out3);
    Or8Way(in=out2, out=out4);
    Or(a=out3, b=out4, out=nzr);
    Not(in=nzr, out=zr);
}